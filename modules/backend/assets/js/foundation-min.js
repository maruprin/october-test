(()=>{"use strict";var __webpack_modules__={5311:module=>{module.exports=jQuery}},__webpack_module_cache__={};function __webpack_require__(moduleId){var cachedModule=__webpack_module_cache__[moduleId];if(void 0!==cachedModule)return cachedModule.exports;var module=__webpack_module_cache__[moduleId]={exports:{}};return __webpack_modules__[moduleId](module,module.exports,__webpack_require__),module.exports}(()=>{function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Controller=function(){function Controller(){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Controller),this.started=!1}var Constructor,protoProps,staticProps;return Constructor=Controller,staticProps=[{key:"disposeControls",value:function(container){container===document&&(container=document.documentElement),container.querySelectorAll("[data-disposable]").forEach((function(control){oc.Events.dispatch("october:dispose",{target:control})})),container.hasAttribute("data-disposable")&&oc.Events.dispatch("october:dispose",{target:container})}}],(protoProps=[{key:"start",value:function(){this.started||(this.started=!0),this.bindAutoDisposal()}},{key:"stop",value:function(){this.started&&(this.started=!1)}},{key:"bindAutoDisposal",value:function(){addEventListener("page:before-render",(function(ev){Controller.disposeControls(ev.target)})),addEventListener("ajax:before-replace",(function(ev){Controller.disposeControls(ev.target)}))}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Controller}();function normalizeData(value){if("true"===value)return!0;if("false"===value)return!1;if(value===Number(value).toString())return Number(value);if(""===value||"null"===value)return null;if("string"!=typeof value)return value;try{return JSON.parse(decodeURIComponent(value))}catch(_unused){return value}}function normalizeDataKey(key){return key.replace(/[A-Z]/g,(function(chr){return"-".concat(chr.toLowerCase())}))}const util_config={setDataAttribute:function(element,key,value){element.setAttribute("data-".concat(normalizeDataKey(key)),value)},removeDataAttribute:function(element,key){element.removeAttribute("data-".concat(normalizeDataKey(key)))},getDataAttributes:function(element){if(!element)return{};for(var attributes={},_i=0,_dataKeys=Object.keys(element.dataset);_i<_dataKeys.length;_i++){var key=_dataKeys[_i];attributes[key]=normalizeData(element.dataset[key])}return attributes},getDataAttribute:function(element,key){return normalizeData(element.getAttribute("data-".concat(normalizeDataKey(key))))}};var elementMap=new Map;const data_set=function(element,key,instance){elementMap.has(element)||elementMap.set(element,new Map);var instanceMap=elementMap.get(element);instanceMap.has(key)||0===instanceMap.size?instanceMap.set(key,instance):console.error("[Foundation] Cannot bind more than one instance per element. Bound instance: ".concat(Array.from(instanceMap.keys())[0],"."))},data_get=function(element,key){return elementMap.has(element)&&elementMap.get(element).get(key)||null},data_remove=function(element,key){if(elementMap.has(element)){var instanceMap=elementMap.get(element);instanceMap.delete(key),0===instanceMap.size&&elementMap.delete(element)}};function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function(){};return{s:F,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function(){it=it.call(o)},n:function(){var step=it.next();return normalCompletion=step.done,step},e:function(_e2){didErr=!0,err=_e2},f:function(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function base_class_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BaseClass=function(){function BaseClass(element,config){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,BaseClass),(element=getElement(element))&&(this.element=element,this.config=this.getConfig(config),this.proxiedMethods={},data_set(this.element,this.constructor.DATANAME,this))}var Constructor,protoProps,staticProps;return Constructor=BaseClass,protoProps=[{key:"dispose",value:function(){for(var key in data_remove(this.element,this.constructor.DATANAME),this.forget("october:dispose",this.proxy(this.dispose)),this.proxiedMethods)this.proxiedMethods[key]=null;var _step,_iterator=_createForOfIteratorHelper(Object.getOwnPropertyNames(this));try{for(_iterator.s();!(_step=_iterator.n()).done;)this[_step.value]=null}catch(err){_iterator.e(err)}finally{_iterator.f()}}},{key:"listen",value:function(eventName,handler,callback){return oc.Events.on(this.element,eventName,handler,callback)}},{key:"listenOnce",value:function(eventName,handler,callback){return oc.Events.one(this.element,eventName,handler,callback)}},{key:"forget",value:function(eventName,handler,callback){return oc.Events.off(this.element,eventName,handler,callback)}},{key:"dispatch",value:function(eventName){var args=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return oc.Events.dispatch(eventName,_objectSpread({target:this.element},args))}},{key:"markDisposable",value:function(){this.element.setAttribute("data-disposable",""),this.listen("october:dispose",this.proxy(this.dispose))}},{key:"onDispose",value:function(callback){this.listen("october:dispose",this.proxy(callback))}},{key:"proxy",value:function(method){return void 0===method.ocProxyId&&(BaseClass.proxyCounter++,method.ocProxyId=BaseClass.proxyCounter),void 0!==this.proxiedMethods[method.ocProxyId]||(this.proxiedMethods[method.ocProxyId]=method.bind(this)),this.proxiedMethods[method.ocProxyId]}},{key:"getConfig",value:function(config){return _objectSpread(_objectSpread(_objectSpread({},this.constructor.DEFAULTS),util_config.getDataAttributes(this.element)),"object"===_typeof(config)?config:{})}}],staticProps=[{key:"getInstance",value:function(element){return data_get(getElement(element),this.DATANAME)}},{key:"getOrCreateInstance",value:function(element){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(element)||new this(element,"object"===_typeof(config)?config:null)}}],protoProps&&base_class_defineProperties(Constructor.prototype,protoProps),staticProps&&base_class_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),BaseClass}();function getElement(element){return"string"==typeof object&&object.length>0?document.querySelector(object):element}_defineProperty(BaseClass,"proxyCounter",0);var $=__webpack_require__(5311);function select_typeof(obj){return select_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},select_typeof(obj)}function select_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(target,property,receiver){var base=_superPropBase(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(arguments.length<3?target:receiver):desc.value}},_get.apply(this,arguments)}function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"===select_typeof(call)||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}var Select=function(_BaseClass){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(Select,_BaseClass);var Constructor,protoProps,staticProps,_super=_createSuper(Select);function Select(element,config){var _this;!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Select),(_this=_super.call(this,element,config)).$el=$(element),_this.formatSelectOption=function(state){var text=$("<span>").text(state.text).html();if(void 0===state.id)return text;var $option=$(state.element),statusColor=state.status?state.status:$option.data("status"),iconClass=state.icon?state.icon:$option.data("icon"),imageSrc=state.image?state.image:$option.data("image");return statusColor?'<span class="select-status status-indicator" style="background:'+statusColor+'"></span> '+text:iconClass?'<i class="select-icon '+iconClass+'"></i> '+text:imageSrc?'<img class="select-image" src="'+imageSrc+'" alt="" /> '+text:text},_this.disableSelect=function(event,status){null!=$(this).data("select2")&&$(this).select2("enable",!status)};var self=_assertThisInitialized(_this);return _this.triggerNativeChange=function(event){oc.Events.dispatch("change",{target:event.currentTarget}),$(event.currentTarget).one("change",self.triggerNativeChange)},_this.destroyPlaceholder(),_this.$el.one("change",_this.proxy(_this.triggerNativeChange)),_this.$el.on("disable",_this.proxy(_this.disableSelect)),_this.bindCustomSelect(),_this.bindCustomSelectWorkaround(),_this.markDisposable(),_this}return Constructor=Select,protoProps=[{key:"bindCustomSelectWorkaround",value:function(){this.$el.data("select2").$container.addClass(this.options.containerCssClass),this.select2OpenWorkaround=function(){setTimeout((function(){document.querySelector(".select2-container--open .select2-search__field").focus()}),100)},this.$el.on("select2:open",this.select2OpenWorkaround)}},{key:"dispose",value:function(){this.clonePlaceholder(),this.$el.off("change",this.proxy(this.triggerNativeChange)),this.$el.off("disable",this.proxy(this.disableSelect)),this.$el.off("select2:open",this.select2OpenWorkaround),this.$el.select2("destroy"),_get(_getPrototypeOf(Select.prototype),"dispose",this).call(this)}},{key:"destroyPlaceholder",value:function(){var artefact=this.element&&this.element.nextElementSibling;artefact&&artefact.matches(".select2")&&artefact.remove()}},{key:"clonePlaceholder",value:function(){var artefact=this.element&&this.element.nextElementSibling;if(artefact&&artefact.matches(".select2")){var newNode=artefact.cloneNode(!0);artefact.parentNode.insertBefore(newNode,artefact.nextSibling),newNode.innerHtml=artefact.innerHtml,this.element.style.display="none"}}},{key:"bindCustomSelect",value:function(){var options=this.options=this.buildSelectOptions();this.element.dataset.handler&&(options=this.buildAjaxHandlerOption(options,this.element.dataset.handler)),this.element.dataset.tokenSeparators&&(options=this.buildTokenSeparatorOptions(options,this.element.dataset.tokenSeparators)),this.$el.select2(options)}},{key:"buildTokenSeparatorOptions",value:function(selectOptions,separators){return selectOptions.tags=!0,selectOptions.tokenSeparators=separators.split("|"),this.element.classList.contains("select-no-dropdown")&&(selectOptions.selectOnClose=!0,selectOptions.closeOnSelect=!1,selectOptions.minimumInputLength=1,this.$el.on("select2:closing",(function(){var highlightedEls=$(".select2-dropdown.select-no-dropdown:first .select2-results__option--highlighted");highlightedEls.length>0&&(highlightedEls.removeClass("select2-results__option--highlighted"),$(".select2-dropdown.select-no-dropdown:first .select2-results__option:first").addClass("select2-results__option--highlighted"))}))),selectOptions}},{key:"buildAjaxHandlerOption",value:function(selectOptions,handler){var self=this;return selectOptions.ajax={transport:function(params,success,failure){var request=oc.request(self.$el.get(0),handler,{data:params.data});return request.done(success),request.fail(failure),request},processResults:function(data,params){var results=data.result||data.results,options=[];if(delete data.result,results[0]&&"object"===select_typeof(results[0]))options=results;else for(var i in results)results.hasOwnProperty(i)&&options.push({id:i,text:results[i]});return data.results=options,data},dataType:"json"},selectOptions}},{key:"buildSelectOptions",value:function(){var selectOptions={templateResult:this.formatSelectOption,templateSelection:this.formatSelectOption,escapeMarkup:function(m){return m},width:"style",containerCssClass:"",dropdownCssClass:"",selectionCssClass:""};this.element.classList.contains("select-no-search")&&(selectOptions.minimumResultsForSearch=1/0),this.element.classList.contains("select-no-dropdown")&&(selectOptions.dropdownCssClass+=" select-no-dropdown",selectOptions.selectionCssClass+=" select-no-dropdown"),this.element.classList.contains("select-hide-selected")&&(selectOptions.dropdownCssClass+=" select-hide-selected"),this.element.classList.contains("select-dropdown-auto-width")&&(selectOptions.dropdownAutoWidth=!0,selectOptions.dropdownCssClass+=" select-dropdown-auto-width"),this.element.classList.contains("form-control-sm")&&(selectOptions.containerCssClass+=" form-control-sm"),this.element.classList.contains("form-control-lg")&&(selectOptions.containerCssClass+=" form-control-lg");var language=this.element.dataset.language;if(!language){var meta=document.querySelector('meta[name="backend-locale"]');meta&&(language=meta.getAttribute("content"))}language&&(selectOptions.language=language);var placeholder=this.element.dataset.placeholder;return placeholder&&(selectOptions.placeholder=placeholder,selectOptions.allowClear=!0),selectOptions}}],staticProps=[{key:"DATANAME",get:function(){return"ocSelect"}},{key:"DEFAULTS",get:function(){return{animation:!0,autohide:!0,delay:5e3}}}],protoProps&&select_defineProperties(Constructor.prototype,protoProps),staticProps&&select_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Select}(BaseClass);addEventListener("render",(function(){document.querySelectorAll("select.custom-select").forEach((function(el){Select.getOrCreateInstance(el)}))}));var instance=new Controller;window.oc&&(window.oc.Foundation=instance,window.oc.FoundationBase=BaseClass),instance.start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,